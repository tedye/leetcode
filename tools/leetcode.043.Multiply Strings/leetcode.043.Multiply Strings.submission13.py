class Solution:
    # @param num1, a string
    # @param num2, a string
    # @return a string
    def __init__(self):
        self.reM =  [   [ '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
                        [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
                        [ '0', '2', '4', '6', '8','10','12','14','16','18'],
                        [ '0', '3', '6', '9','12','15','18','21','24','27'],
                        [ '0', '4', '8','12','16','20','24','28','32','36'],
                        [ '0', '5','10','15','20','25','30','35','40','45'],
                        [ '0', '6','12','18','24','30','36','42','48','54'],
                        [ '0', '7','14','21','28','35','42','49','56','63'],
                        [ '0', '8','16','24','32','40','48','56','64','72'],
                        [ '0', '9','18','27','36','45','54','63','72','81']] 
                        
        self.reA =  [   [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
                        [ '1', '2', '3', '4', '5', '6', '7', '8', '9','10'],
                        [ '2', '3', '4', '5', '6', '7', '8', '9','10','11'],
                        [ '3', '4', '5', '6', '7', '8', '9','10','11','12'],
                        [ '4', '5', '6', '7', '8', '9','10','11','12','13'],
                        [ '5', '6', '7', '8', '9','10','11','12','13','14'],
                        [ '6', '7', '8', '9','10','11','12','13','14','15'],
                        [ '7', '8', '9','10','11','12','13','14','15','16'],
                        [ '8', '9','10','11','12','13','14','15','16','17'],
                        [ '9','10','11','12','13','14','15','16','17','18']] 
                        
    def multiply(self, num1, num2):
        res = [['0'] for i in range(len(num1) + len(num2))]

        for i in range(len(num1)):
            basePos = i
            for j in range(len(num2)):
                curPos = basePos+j
                product = self.helperM(num1[-i-1],num2[-j-1])
                for k in range(len(product)):
                    res[curPos+k].append(product[-k-1])
        for i in range(len(res)):
            s = res[i][0]
            for n in res[i]:
                s = self.helperA(s,n)
                if len(s) == 2:
                    res[i+1].append(s[0])
                    s = s[-1]
            res[i] = s
        res = ''.join(res)[::-1]
        i = 0
        while i < len(res)-1 and res[i] == '0':
            i += 1
        return res[i:]



    def helperM(self,s1,s2):
        return self.reM[int(s1)][int(s2)]
    
    def helperA(self,s1,s2):
        return self.reA[int(s1)][int(s2)]
        